Type/ Data type  -------> number
Annotations -------> : numbers (let age : number = 30)

Type inference 
-----------------
let age = 30;  Automatically assing the datatype based on data type  [ it is inferrence ]

-----------------------------------------------------------------------------------

premitive (appart from java )   premitive store 1 value
----------
null
undefined
any
union type
void

non-premitive Data store 2 value - store multiple values (objects)
-------------------------------

array , class , function , interface , Touple 

==========================================================================================

Data types premitive;

1 number Type ----> store both integer and float values

2 string ----> represent in 3 ways
   1 . singleQuote (' ')
   2 . DoubleQuote (" ")
   3 . backtick (` `) -------> to store the data in the string  ex [ greet:string = `hello ${helo}${last}` ]

3 boolean ----> stu:boolean=true;

4 null & undefined -------> special type oof absence of value   ( no value for the variable)

    empty:null=null;  ---------> null

    not assign:undefined = undefine; 


5 Any -----> it violate the rule of type safety [ loses typescript benefit ]

let value:any="welcome";
value = 100; // here as per typescript we got error but we cant because of (Any type)


6 union type ------> combine multiple types 

let id:number | string | boolean;


7 void -----> it used in function not return anything  [ it is optional ]

  function sum():void   ------>  function not return any thing
  {

  }
  function sum():number ------->  in these it return number 



8 function show():void ---------> these function is not return anything [ it is optional ]
{
    console.log("welcome")
}
show(); 

function sum(x:number , y:number):number ----> it return 
{
    return(x+y)
}
let res:number=sum(10,20); -----> return value and store in var
console.log(res)

===============================================================================================